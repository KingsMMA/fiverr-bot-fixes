generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Setting {
  id Int @id @default(1)

  activitytype ActivityTextType @default(Playing)
  activityname String           @default("LOL Dobby")

  resetcheckins Boolean @default(false)

  checkinrewards          Int    @default(15)
  checkintargetcount      Int    @default(90)
  checkintargetroleid     String @default("")
  checkinminimummsglength Int    @default(25)
  checkinchannelid        String @default("")

  moderatorroleid String @default("")
  teamroleid      String @default("1236092244910407740")

  commandschannelid String @default("")
  lecturechannelid  String @default("")
  lecturerewards    Int    @default(10)

  leaderboardmessageid String @default("")
  leaderboardchannelid String @default("")

  shopmessageid  String @default("")
  shopchannelid  String @default("")
  staffchannelid String @default("1265956930833354772")

  oneemojiprice     Int @default(30)
  twovipticketprice Int @default(250)
  three1v1price     Int @default(300)
  fourvodprice      Int @default(600)
  fivebadgeprice    Int @default(1000)
  sixsubprice       Int @default(1250)
  sevenflipperprice Int @default(1000)
  eigthhevinixprice Int @default(1500)
  ninerpprice       Int @default(2000)

  islectureongoing boolean @default(false)

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

enum ActivityTextType {
  Playing
  Streaming
  Listening
  Watching
  Competing
}

model Player {
  discordid  String @id
  discordtag String

  dobbypoints    Int @default(0)
  checkinstreak  Int @default(0)
  previousstreak Int @default(0)

  ischeckedin Boolean @default(false)
  isclaimed   Boolean @default(false)

  bets PlayerBet[]

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model Bet {
  id Int @id @default(autoincrement())

  isopen Boolean @default(true)

  messageid  String? @unique
  channelid  String?
  messageurl String?

  creatorid String

  title       String
  description String
  options     String[]
  amounts     Int[]

  winningoptionsindices Int[]
  winningoptionsamounts Float[]
  winnerstext           String  @default("")

  bets PlayerBet[]

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model PlayerBet {
  id Int @id @default(autoincrement())

  player   Player @relation(fields: [playerID], references: [discordID], onDelete: Cascade)
  playerid String

  bet   Bet @relation(fields: [betID], references: [id], onDelete: Cascade)
  betid Int

  optionindex Int
  amount      Int

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  @@unique([betid, playerid])
}

model Item {
  id          Int     @id
  name        String
  title       String
  description String?
  role        String?
  price       Int
  emoji       String  @default("<:forex:1265969777462083646>")

  usermessage  String
  staffping    String
  staffmessage String

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model Event {
  id        Int       @id @default(autoincrement())
  code      String    @unique // Add this field for short unique code
  type      EventType
  starttime DateTime
  endtime   DateTime?
  duration  Int? // Duration in minutes

  channelid   String
  channelname String

  hostid  String
  hosttag String

  attendeecount Int @default(0)

  attendees EventAttendee[]

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model EventAttendee {
  id      Int   @id @default(autoincrement())
  event   Event @relation(fields: [eventId], references: [id])
  eventid Int

  // Attendee info
  userid  String
  usertag String

  // Track join/leave times
  jointime  DateTime
  leavetime DateTime?

  @@unique([eventid, userid]) // Ensure one record per user per event
}

enum EventType {
  LECTURE
  OFFICE_HOURS
}
